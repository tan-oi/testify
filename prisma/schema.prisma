
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}



model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  hashedPassword String?
  image         String?
  accounts      Account[]
  sessions      Session[]
  spaces        Space[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 

model Space {
  id String @id @default(cuid())
  name String 
  userId String
  slug String @unique 
  logo String?
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  testimonials Testimonials[]
 
  spaceCustomization SpaceCustomization?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  

}




model SpaceCustomization {
  id String @id @default(uuid())
  spaceId String @unique

    headerTitle String
    headerDescription String
    spaceQuestions Json[]
    allowVideo Boolean

    // spaceTheme Theme @default(DARK)
    allowStarRatings Boolean @default(true)

    thankYouHeader String
    thankYouMessage String

    askConsent Boolean @default(true)
    textLength Int

    videoLength Int? 
    allowShare Boolean @default(true)
    

  space Space @relation(fields: [spaceId], references: [id], onDelete: Cascade)

}
model Testimonials {
  id String @id @default(cuid())
  type ContentType @default(TEXT)
  source TestimonialSource @default(MANUAL)
  importedFrom   ImportType?
  senderName String
  senderEmail String?
  uniqueImportId String? //only valid when the testimonial is imported from a certain platform
  content String?
  rating Int? @default(5)
  videoUrl String?
  imageUrl String[] @default([])
  consentDisplay Boolean @default(true)
  isLiked Boolean @default(false)
  spaceId String 
  space Space @relation(fields: [spaceId], references: [id], onDelete: Cascade)

  // isPublished Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt


  // @@index([spaceId,type])
}
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}
 

enum ContentType {
  TEXT
  VIDEO
}

enum TestimonialSource {
  IMPORT 
  MANUAL
}

enum ImportType {
  Twitter
  Linkedin
  ProductHunt
  Google
  Youtube
}

enum Theme {
  DARK
  LIGHT
}